recursive
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root){
            invertTree(root->left);
            invertTree(root->right);
            std::swap(root->left,root->right);
        }
        return root;
    };
    
    
    
    
    
    
    iterative
    
    public:
    TreeNode* invertTree(TreeNode* root) {
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            TreeNode* p=s.top();
            s.pop();
            if(p){
                s.push(p->left);
                s.push(p->right);
                swap(p->left,p->right);
            }
        }
      return root;  
    };
