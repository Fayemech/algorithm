recursive


public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(p->val<root->val&&q->val<root->val)   return lowestCommonAncestor(root->left,p,q);
        if(p->val>root->val&&q->val>root->val)   return lowestCommonAncestor(root->right,p,q);
        return root;
    };
    
    
    
    
    
    iteratively
    
    
    
    
    public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* cur=root;
        while(cur){
            if(p->val<cur->val&&q->val<cur->val)  cur=cur->left;
            else if(p->val>cur->val&&q->val>cur->val)  cur=cur->right;
            else return cur;
            
        }
    };
