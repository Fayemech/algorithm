solution1:any tree;
public:
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> s;
        return dfs(root,s,k);
    }
    bool dfs(TreeNode* root,unordered_set<int>& s,int k){
        if(root==NULL)   return false;
        if(s.count(k-root->val))  return true;
        s.insert(root->val);
        return dfs(root->left,s,k)||dfs(root->right,s,k);
    };


solution2: only bst tree;
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> order;
        inorder(root,order);
        for(int i=0,j=order.size()-1;i<j;){
            if(order[i]+order[j]==k){
                return true;
            }
            (order[i]+order[j])>k?j--:i++;
        }
        return false;
    }
    void inorder(TreeNode* root, vector<int>& order){
        if(root==NULL)  return;
        inorder(root->left,order);
        order.push_back(root->val);
        inorder(root->right,order);
    };

solution3:
public:
    bool findTarget(TreeNode* root, int k) {
        return dfs(root,root,k);
    }
    bool dfs(TreeNode* root, TreeNode* cur, int k){
        if(cur==NULL)  return false;
        return serch(root,cur,k-cur->val)||dfs(root,cur->left,k)||dfs(root,cur->right,k);
    }
    bool serch(TreeNode* root, TreeNode* cur, int s){
        if(root==NULL)   return false;
        return (root->val==s)&&(root!=cur)||(root->val<s)&&serch(root->right,cur,s)||(root->val>s)&&serch(root->left,cur,s);
    };
